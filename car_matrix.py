# -*- coding: utf-8 -*-
"""Car_matrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z8lI7HWu3NCikSns6aU3eAPIxXlr4G-9
"""

import numpy as np
import pandas as pd

# Python Task 1

# Question 1: Car Matrix Generation
def generate_car_matrix():
    df = pd.read_csv('dataset-1.csv')
    matrix = df.pivot(index='id_1', columns='id_2', values='car').fillna(0)
    for i in range(min(matrix.shape)):
        matrix.iloc[i, i] = 0

    return matrix

generate_car_matrix()

# Question 2: Car Type Count Calculation
import pandas as pd

def get_type_count(df):
    conditions = [
        (df['car'] <= 15),
        (df['car'] > 15) & (df['car'] <= 25),
        (df['car'] > 25)
    ]
    choices = ['low', 'medium', 'high']
    df['car_type'] = pd.Series(pd.cut(df['car'], bins=[-float('inf'), 15, 25, float('inf')], labels=choices))

    type_count = df['car_type'].value_counts().to_dict()

    sorted_type_count = {key: type_count[key] for key in sorted(type_count)}

    return sorted_type_count

get_type_count()

# Question 3: Bus Count Index Retrieval
import pandas as pd

def get_bus_indexes(df):
    bus_mean = df['bus'].mean()
    bus_indexes = df[df['bus'] > 2 * bus_mean].index.tolist()
    bus_indexes.sort()

    return bus_indexes

get_bus_indexes()

# Question 4: Route Filtering
import pandas as pd

def filter_routes(df):
    avg_truck_by_route = df.groupby('route')['truck'].mean()
    routes_filtered = avg_truck_by_route[avg_truck_by_route > 7].index.tolist()
    routes_filtered.sort()

    return routes_filtered

filter_routes()

# Question 5: Matrix Value Modification
def multiply_matrix(matrix):
    modified_matrix = matrix.applymap(lambda x: x * 0.75 if x > 20 else x * 1.25)
    modified_matrix = modified_matrix.round(1)

    return modified_matrix

multiply_matrix()

# Question 6. Time Check
import pandas as pd

def verify_timestamp_completeness(df):

    df['start_timestamp'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'])
    df['end_timestamp'] = pd.to_datetime(df['endDay'] + ' ' + df['endTime'])


    df['duration'] = df['end_timestamp'] - df['start_timestamp']


    grouped = df.groupby(['id', 'id_2'])


    def check_completeness(group):

        completeness = group.groupby(group['start_timestamp'].dt.date)['duration'].sum() >= pd.Timedelta(days=1)

        completeness &= len(completeness) == 7

        return not completeness.all()

    completeness_result = grouped.apply(check_completeness)

    return completeness_result

verify_timestamp_completeness()

# Python Task 2

# Question 1: Distance Matrix Calculation

import pandas as pd

def calculate_distance_matrix(df):
    pivot = df.pivot_table(index='start', columns='end', values='distance', aggfunc='sum', fill_value=0)
    distance_matrix = pivot.add(pivot.T, fill_value=0)
    distance_matrix.values[[range(distance_matrix.shape[0])]*2] = 0

    return distance_matrix

calculate_distance_matrix()

# Question 2: Unroll Distance Matrix

import pandas as pd

def unroll_distance_matrix(distance_matrix):

    distance_df = distance_matrix.reset_index()
    melted = pd.melt(distance_df, id_vars='index', var_name='id_end', value_name='distance')
    melted.columns = ['id_start', 'id_end', 'distance']
    unrolled_distance = melted[melted['id_start'] != melted['id_end']]

    return unrolled_distance

unroll_distance_matrix()

# Question 3: Finding IDs within Percentage Threshold

def find_ids_within_ten_percentage_threshold(df, reference_value):

    average_distance = df[df['id_start'] == reference_value]['distance'].mean()
    threshold = 0.1 * average_distance
    within_threshold = df[(df['distance'] >= average_distance - threshold) & (df['distance'] <= average_distance + threshold)]
    values_within_threshold = within_threshold['id_start'].unique()
    sorted_values = sorted(values_within_threshold)

    return sorted_values

find_ids_within_ten_percentage_threshold()

# Question 4: Calculate Toll Rate

def calculate_toll_rate(df):
    rate_coefficients = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }

    for vehicle, rate in rate_coefficients.items():
        df[vehicle] = df['distance'] * rate

    return df

calculate_toll_rate()

# Question 5: Calculate Time-Based Toll Rates

import pandas as pd
from datetime import time

def calculate_time_based_toll_rates(df):
    df['start_time'] = pd.to_datetime(df['start_time'])
    df['end_time'] = pd.to_datetime(df['end_time'])

    def calculate_rate(row):
        day_of_week = row['start_time'].strftime('%A')

        if day_of_week in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']:
            if time(0, 0) <= row['start_time'].time() <= time(10, 0):
                return 0.8
            elif time(10, 0) <= row['start_time'].time() <= time(18, 0):
                return 1.2
            else:
                return 0.8
        else:
            return 0.7

    df['start_day'] = df['start_time'].dt.day_name()
    df['end_day'] = df['end_time'].dt.day_name()
    df['moto'] = df.apply(lambda row: row['moto'] * calculate_rate(row), axis=1)
    df['car'] = df.apply(lambda row: row['car'] * calculate_rate(row), axis=1)
    df['rv'] = df.apply(lambda row: row['rv'] * calculate_rate(row), axis=1)
    df['bus'] = df.apply(lambda row: row['bus'] * calculate_rate(row), axis=1)
    df['truck'] = df.apply(lambda row: row['truck'] * calculate_rate(row), axis=1)

    df['start_time'] = df['start_time'].dt.time
    df['end_time'] = df['end_time'].dt.time

    return df

calculate_time_based_toll_rates()